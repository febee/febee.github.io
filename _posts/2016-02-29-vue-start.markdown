---
layout: post
title:  "Vue.js 第一说"
author: xiaoyang
categories: [release]
---

# Vue.js的自定指令

vue.js允许我们自定自己需要的指令，Vue.directive(id, definition) 的方法传入指令 id 和定义对象来注册一个全局自定义指令，定义对象需要一些钩子函数：
bind: 仅调用一次，当指令第一次绑定元素的时候
update： 第一次是紧跟在 bind 之后调用，获得的参数是绑定的初始值；以后每当绑定的值发生变化就会被调用，获得新值与旧值两个参数。
unbind：仅调用一次，当指令解绑元素的时候。

```js
  Vue.directive('my-directive', {
  	  // 准备工作
	  bind: function () {
	    console.log('my-directive')
	  },
	  // 值更新时的工作(初始化一次)
	  update: function (value) {
	    this.el.innerHTML ='value - '+ value
	  }
  })
  var demo = new Vue({
	  el: '#demo',
	  data: {
	    my-directive: 'hello!'
	  }
  })
```

这样我们就可以直接引入了

```html
	<!-- 调用方式 -->
	<div id="demo" v-my-directive="someValue"></div>
```
有时候，我们可能想要我们的指令可以以自定义元素的形式被使用，而不是作为一个特性，这时候元素指令就可以看成自定义组件，我们可以这样来注册一个自定义
的元素指令(这个后面接着讲)

```js
	window.onload=function(){
		Vue.elementDirective('my-directive', {
		  // 和普通指令一样
		  bind: function () {
		    document.write("my-directive");
		  }
		})

		var demo = new Vue({
		  el: '#demo',
		  data: {
		    msg: 'hello!'
		}
 		})
    }
```

页面上就可以这么引入了

```html
	<!-- 调用方式 -->
	<my-directive></my-directive>
```